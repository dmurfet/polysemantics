/////////////////////////////////////////////////////////////////////////////
// Polynomial semantics of binary sequences
//

option(noredefine);option(noloadLib);
LIB "polysem.lib";
int k = 2;
ring rr=0,(a(1..k)(1..k),ap(1..k)(1..k)),dp;

matrix U[k][k];
matrix Up[k][k];

int i,j;
for(i=1;i<=k;i++)
{
    for(j=1;j<=k;j++)
    {
        U[i,j] = a(i)(j);
        Up[i,j] = ap(i)(j);   
    }
}

int L = 3;

// Create the list of all binary sequences of length L
list allSeq = seqsfrominterval(2, L);

int s;
for(s=1;s<=size(allSeq);s++)
{
    allSeq[s] = allSeq[s] - 1;
}

// Generate the string representatives of tS
list allStrings;
for(s=1;s<=size(allSeq);s++)
{
	list vectorCoeffs = matrix_to_vect(sem_binaryseq(U,Up,allSeq[s]),L);
	
	string outStr;

	for(i=1;i<=size(vectorCoeffs);i++)
	{
    	outStr = outStr + string(vectorCoeffs[i]);
	}
	
	allStrings = allStrings + list(outStr);
}

// Output that vector to some format that Python can import
